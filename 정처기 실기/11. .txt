133. 운영체제의 종류
  1) Windows123
    - 1990년대 마이크로소프트 사가 개발한 운영체제
    - 특징
      - 그래픽 사용자 인터페이스(GUI : Graphic User Interface)
        - 마우스로 아이콘이나 메뉴를 선택하여 작업 수행

      - 선점형 멀티태스킹(Preemptive Multi-Tasking)
        - 동시에 여러 개의 프로그램을 실행하는 멀티태스킹을 하면서 문제 발생 시
          프로그램을 강제종료시키고 모든 시스템 자원을 반환하는 방식

      - PnP(Plug and Play, 자동 감지 기능)
        - 컴퓨터 시스템에 하드웨어 설치 시 해당 하드웨어를 사용하기 위한 환경을 운영체제가
          자동으로 구성해주는 기능

      - OLE(Object Linking and Embeding)
        - 다른 여러 응용 프로그램에서 작성된 문자나 그림 등의 개체를 현재 작성 중인 문서에
          자유롭게 연결하거나 삽입하여 편집할 수 있게하는 기능

      - 255자의 긴 파일명
        - /\*?"<>|을 제외한 모든 문자 및 공백 사용해 최대 255자의 파일 이름 지정

      - Single-User 시스템
        - 컴퓨터 한 대를 한 사람이 독점해서 사용함

  2) UNIX
    - 벨 연구소, MIT, General Electric이 공동 개발한 운영체제
    - 시분할 시스템을 위해 설계된 대화식 운영체제
    - 소스가 공개된 개방형 시스템
    - 대부분 C언어로 작성되어 있어 이식성, 호환성이 높음
    - 다중사용자, 다중작업 지원
    - 트리 구조 파일 시스템

  3) UNIX 시스템 구성
    - 커널(Kernel)
      - 하드웨어 보호, 프로그램과 하드웨어 간의 인터페이스 담당
      - UNIX의 가장 핵심적인 부분
      - 프로세스 관리, 기억장치 관리, 파일 관리, 입출력관리, 프로세스간 통신, 데이터 전송 및 변환

    - 쉘(Shell)
      - 사용자 명령어를 인식하여 프로그램 호출, 명령 수행
      - 시스템과 사용자 간의 인터페이스 담당
      - Bourne Shell, C Shell, Korn Shell

    - 유틸리티 프로그램(Utility Program)
      - 일반 사용자가 작성한 응용 프로그램 처리하는 데 사용
      - DOS에서의 외부 명령에 해당됨
      - 에디터, 컴파일러, 인터프리터, 디버거

  4) LINUX
    - 리누스 토발즈가 UNIX 기반으로 개발한 운영체제
    - 소스 코드 공개
    - UNIX와 완벽하게 호환
    - 대부분 특징이 UNIX와 동일

  5) MacOS
    - 애플 사가 UNIX를 기발으로 개발한 운영체제
  
  6) Android
    - 구글 사에서 개발한 리눅스 커널 기반 개방형 모바일 운영체제
    - 모든 소스 코드 공개
    - 자바, 코틀린
  
  7) iOS
    - 애플 사에서 개발한 유닉스 기반의 모바일 운영체제
  
136. 페이지 교체 알고리즘
  1) 페이지 교체 알고리즘
    - 페이지 부재(Page Fault)가 발생하면 가상 기억장치에서 필요한 페이지를 찾아 주기억장치에 적재해야 하는데, 
      이때 주기억장치의 모든 페이지 프레임이 사용중이면 어떤 페이지 프레임을 선택하여 교체할 것인지를 결정하는 기법
      * 페이지 부재 : CPU가 액세스한 가상 페이지가 주기억장치에 없는 경우
      * 가상기억장치 : 보조기억장치 일부를 주기억장치처럼 사용하는 것

  2) OPT(OPTimal replacement, 최적 교체)
    - 앞으로 가장 오랫동안 사용하지 않을 페이지 교체
    - 가장 효율적인 알고리즘
  
  3) FIFO(First In First Out)
    - 가장 먼저 들어와서 가장 오래 있었던 페이지를 교체
  
  4) LRU(Least Recently Used)
    - 최근에 가장 오랫동안 사용하지 않은 페이지를 교체
    - 각 페이지마다 계수기나 스택을 두어 현시점에서 가장 오랫동안 사용하지 않은 페이지 교체

  5) LFU(Least Frequently Used)
    - 사용 빈도가 가장 적은 페이지 교체
    - 사용되지 않음

  6) NUR(Not Used Recently)
    - 최근에 사용하지 않은 페이지 교체
    - 시간적인 오버헤드를 줄일 수 있음
    - 최근 사용 여부 확인을 위해 참조 비트와 변형 비트 사용
    
    참조 비트   0   0   1   1
    변형 비트   0   1   0   1
    교체 순서   1   2   3   4

  7) SCR(Second Chance Replacement, 2차 기회 교체)
    - 가장 오랫동안 주기억장치에 있던 페이지 중 자주 사용되는 페이지의 교체를 방지하기 위한 기법
    - FIFO 단점 보완

137. 가상기억장치 기타 관리 사항
  1) 페이지 크기
    - 페이징 기법 사용 시 프로그램을 페이지 단위로 나눔
    
    - 페이지 크기가 작을 경우
      - 페이지 단편화 감소, 한 개 페이지를 주기억장치로 이동시키는 시간이 줄어듬
        * 단편화 : 분할된 영역이 프로그램이나 데이터보다 작거나 커서 생기는 빈 기억 공간
          - 내부 단편화 : 분할된 영역이 더 커서 할당 후 공간이 남음
          - 외부 단편화 : 분할된 영역이 더 작아서 할당 못해서 공간이 남음
      - 효율적인 워킹 셋 유지
      - 페이지 맵 테이블의 크기가 커지고 매핑 속도가 늦어짐
      - 디스크 접근 횟수가 많아져 전체적인 입출력 시간 늘어남

    - 페이지 크기가 클 경우
      - 페이지 맵 테이블의 크기가 작아지고, 매핑 속도가 빨라짐
      - 디스크 접근 횟수가 줄어들어 전체적인 입출력 효율성 증가
      - 페이지 단편화 증가, 한 개 페이지를 주기억장치로 이동시키는 시간이 늘어남

  2) Locality
    - 프로세스가 실행되는 동안 주기억장치를 참조할 때 일부 페이지만 집중적으로 참조하는 성질
    - 스래싱을 방지하기 위한 워킹 셋 이론의 기반이 됨
    - 가상기억장치 관리와 캐시 메모리 시스템의 이론적인 근거
    - 시간 구역성 : 프로세스가 실행되면서 하나의 페이지를 일정 시간 동안 집중적으로 액세스하는 현상
    - 공간 구역성 : 프로세스 실행 시 일정 위치의 페이지를 집중적으로 액세스하는 현상

  3) 워킹 셋
    - 프로세스가 일정 시간 동안 자주 참조하는 페이지들의 집합
    - Locality 특징을 이용
    - 자주 참조되는 워킹 셋을 주기억장치에 상주시킴으로써 페이지 부재 및 페이지 교체 현상이 줄어들어 안정됨

  4) 스래싱
    - 프로세스 처리 시간보다 페이지 교체에 소요되는 시간이 더 많아지는 현상
    - 전체 시스템의 성능 저하
    - 다중 프로그래밍의 정도가 높아짐에 따라 CPU 이용률은 특정 시점까지 높아지지만,
      더 커지면 스래싱이 나타나고 CPU 이용률은 급격히 감소함

138. 프로세스의 개요
  1) 프로세스(Process)
    - 실행중인 프로그램
    - PCB를 가진 프로그램
    - 실기억장치에 저장된 프로그램
    - 프로세서가 할당되는 실체로서, 디스패치가 가능한 단위
    - 프로시저가 활동중인 것
    - 비동기적 행위를 일으키는 주체
    - 지정된 결과를 얻기 위한 일련의 계통적 동작
    - 목적 또는 결과에 따라 발생되는 사건들의 과정
    - 운영체제가 관리하는 실행 단위

  2) PCB(Process Control Block, 프로세스 제어 블록)
    - 운영체제가 프로세스에 대한 중요한 정보를 저장해 놓는 곳
    - 각 프로세스가 생성될 때 고유의 PCB가 생성되고, 프로세스가 완료되면 제거됨
    - PCB에 저장되어 있는 정보
      - 프로세스의 현재 상태, 포인터, 프로세스 고유 식별자, 우선순위 등
    
  3) 프로세스 상태 전이
    - 프로세스가 시스템 내에 존재하는 동안 프로세스의 상태가 변하는 것
    - 제출(Submit) 
      - 작업을 처리하기 위해 사용자가 작업을 시스템에 제출한 상태
    - 접수(Hold)
      - 제출된 작업이 스풀 공간인 디스크의 할당 위치에 저장된 상태
    - 준비(Ready)
      - 프로세스가 프로세서를 할당받기 위해 기다리고 있는 상태
    - 실행(Run)
      - 준비상태 큐에 있는 프로세스가 프로세서를 할당받아 실행되는 상태
    - 대기(Wait), 블록(Block)
      - 프로세스에 입출력 처리가 필요하면 현재 실행 중인 프로세스가 중단되고, 입출력 처리가 완료될 때까지 대기하고 있는 상태
    - 종료(Terminated, Exit)
      - 프로세스의 실행이 끝나고 프로세스 할당이 해제된 상태

  4) 프로세스 전이 관련 용어
    - Dispatch
      - 준비 상태에서 대기하고 있는 프로세스 중 하나가 프로세서를 할당 받아 실행 상태로 전이되는 과정
    - Wake Up
      - 입출력 작업이 완료되어 프로세스가 대기 상태에서 준비 상태로 전이되는 과정
    - Spooling
      - 느린 입출력장치 처리 속도 보완, 다중 프로그래밍의 시스템 성능을 높이려고 한꺼번에 입출력하기 위해 디스크에 저장하는 과정
    - Traffic Controller(교통량 제어기)
      - 프로세스의 상태에 대한 조사와 통보 담당

  5) 스레드(Thread)
    - 시스템의 여러 자원을 할당받아 실행하는 프로그램의 단위
    - 프로세스 내에서의 작업 단위
    - 단일 스레드, 다중 스레드
    - 경량 프로세스라고도 함
    - 스레드 기반 시스템에서 스레드는 독립적인 스케줄링의 최소 단위로서 프로세스의 역할을 담당

140. 주요 스케줄링 알고리즘
  1) FCFS(First Come First Service, 선입선출) = FIFO(First In First Out)
    - 준비상태 큐에 도착한 순서에 따라 차례로 CPU를 할당하는 기법
    - 대기 시간 : 프로세스가 대기한 시간으로, 바로 앞 프로세스까지의 진행 시간으로 계산
    - 반환 시간 : 프로세스의 대기 시간과 실행 시간의 합

  2) SJF(Shortest Job First, 단기 작업 우선)
    - 준비상태 큐에서 기다리고 있는 프로세스들 중에서 실행 시간이 가장 짧은 프로세스에게 먼저 CPU 할당하는 기법
    - 가장 적은 평균 대기 시간 제공

  3) HRN(Highest Response-ratio Next)
    - 대기 시간과 서비스(실행) 시간을 이용하는 기법
    - 우선순위를 계산하여 숫자가 가장 높은 것부터 낮은 순으로 우선순위 부여
    - 우선순위 계산식 = (대기시간 + 서비스 시간) / 서비스 시간

  4) RR(Round Robin)
    - 시간 할당량 동안만 실행한 후 실행이 완료되지 않으면 다음 프로세스에게 CPU 넘겨주는 기법
    - 할당되는 시간이 클 경우 FCFS 기법과 같아지고 작을 수록 문맥 교환 및 오버헤드가 자주 발생됨
    - 반환 시간 : 각 프로세스가 완료되는 시간
    - 대기 시간 : 프로세스의 가장 마지막 실행이 시작되기 전까지의 진행 시간을 구하되 앞에서 실행된 시간 제외

  5) SRT(Shortest Remaining Time)
    - 현재 실행중인 프로세스의 남은 시간과 준비상태 큐에 새로 도착한 프로세스의 실행 시간을 비교하여 
      가장 짧은 실행 시간을 요구하는 프로세스에게 CPU 할당

142. 운영체제 기본 명령어
  1) Windows 기본 명령어
    - DIR : 현재 디렉터리 파일 목록 표시
    - COPY : 팡리 복사
    - DEL : 파일 삭제
    - TYPE : 파일 내용 표시
    - REN : 파일 이름 변경
    - MD : 디렉터리 생성
    - CD : 디렉터리 위치 변경
    - CLS : 화면 내용 지움 
    - ATTRIB : 파일 속성 변경
    - FIND : 파일에서 문자열 찾음, find "123" abc.txt
    - CHKDSK : 디스크 상태 점검
    - FORMAT : 디스크 표면을 트랙과 섹터로 나누어 초기화함
    - MOVE : 파일을 이동함

  2) UNIX/LINUX 기본 명령어
    - cat : 파일 내용 표시
    - cd : 디렉터리 위치 변경 
    - chmod : 파일 사용 허가 지정
    - chown : 파일 소유자와 그룹을 변경
    - cp : 파일 복사
    - rm : 파일 삭제
    - find : 파일을 찾음
    - fsck : 파일 시스템을 검사하고 보수함
    - kill : PID를 이용해 프로세스 종료
    - fork : 새로운 프로세스 생성
    - killall : 프로세스의 이름을 이용해 프로세스 종료
    - ls : 현재 디렉터리의 파일 목록 표시
    - mkdir : 디렉터리 생성 
    - rmdir : 디렉터리 삭제
    - mv : 파일을 이동함
    - ps : 현재 실행중인 프로세스 표시
    - pwd : 현재 작업중인 디렉터리 경로 표시
    - top : 시스템의 프로세스와 메모리 사용 현황을 표시
    - who : 현재 시스템에 접속해 있는 사용자를 표시

  - rwx rwx r-x
    111 111 101
    7   7   5
    chmod 775 batch.sh

143. 인터넷
  1) 인터넷(Internet)
    - TCP/IP 프로토콜을 기반으로 전 세계 수많은 컴퓨터와 네트워크들이 연결된 광범위한 컴퓨터 통신망
    - 인터넷에 연결된 모든 컴퓨터는 고유한 IP 주소를 갖는다.

  2) IP 주소(Internet Protocol Address)
    - 인터넷에 연결된 모든 컴퓨터 자원을 구분하기 위한 고유한 주소
    - 8비트씩 4부분, 총 32비트로 구성
    - 네트워크 부분의 길이에 따라 A~E 클래스로 나눔
    - A class
      - 국가나 대형 통신망에 사용(0~127로 시작, 128 실질적으론 1~127)
      - 2^24 개의 호스트 사용 가능
    - B class
      - 중대형 통신망에 사용(128~191로 시작, 64)
      - 2^16 개의 호스트 사용 가능
    - C class
      - 소규모 통신망에 사용(192~223으로 시작, 32)
      - 2^8 개의 호스트 사용 가능
    - D class
      - 멀티캐스 용으로 사용(224~239로 시작, 16)
    - E class
      - 실험적 주소이며 공용되지 않음

  3) 서브네팅(Subnetting)
    - 할당된 네트워크 주소를 다시 여러 개의 작은 네트워크로 나누어 사용하는 것
    - 4바이트의 IP주소 중 네트워크 주소와 호스트 주소를 구분하기 위한 비트를 서브넷 마스크라고 함
      이를 변경하여 네트워크 주소를 여러 개로 분할하여 사용
    - 각 클래스마다 다르게 사용
    
    - ex)
      192.168.1.0/24 네트워크를 FLSM 방식을 이용하여 3개의 Subnet으로 나눌 때, 
      두 번째 네트워크의 브로드캐스트 IP주소를 10진수 방식으로 쓰시오

      /24는 서브넷 마스크를 의미함
      1의 개수가 24개임

      11111111 11111111 11111111 00000000
        255       255      255      0

      8비트 중 3을 표현하는데 필요한 2(2^2=4)를 제외하고 나머지 6비트를 호스트로 구성
      
      네트워크 개수 = 2^2     = 4
      호스트   개수 = 2^(8-2) = 64
      
      네트워크 주소  브로드캐스트 주소
      192.168.1.0   192.168.1.63
      192.168.1.64  192.168.1.127
      192.168.1.128 192.168.1.191
      192.168.1.192 192.168.1.255

      = 192.168.1.127

  4) IPv6(Internet Protocol version 6)
    - IPv4의 주소 부족 문제 해결을 위해 나옴
    - 128비트의 긴 주소 사용
    - 자료 전송 속도 빠름
    - 인증성, 기밀성, 데이터 무결성 지원
    - 주소의 확장성, 융통성, 연동성 뛰어남
    - 실시간 흐름 제어로 향상된 멀티미디어 기능 지원
    - 패킷 크기 확장 가능, 패킷 크기 제한 없음
    - 기본 헤더 뒤에 확장 헤더를 더함으로써 네트워크 기능 확장이 용이
    - IPv4와 호환성 뛰어남
    
  5) IPv6의 구성
    - 16비트씩 8부분, 총 128비트
    - 각 부분을 16진수로 표현하고, 콜론(:)으로 구분
    - 멀애유
      - 유니캐스트 : 단일 송신자와 단일 수신자 간의 통신
      - 멀티캐스트 : 단일 송신자와 다중 수신자 간의 통신
      - 애니캐스트 : 단일 송신자와 가장 가까이 있는 단일 수신자 간의 통신

  6) 도메인 네임
    - 숫자로 된 IP주소를 사람이 이해하기 쉬운 문자 형태로 표현
    - DNS(Domain Name System) : 문자로 된 도메인 네임을 IP주소로 변환
    - 호스트 컴퓨터 이름, 소속 기관 이름, 소속 기관 종류, 소속 국가 순으로 구성
      - www.sinagong.co.kr

144. OSI 참조 모델
  1) OSI(Open System Interconnection) 참조 모델
    - 다른 시스템 간의 원활한 통신을 위해 ISO(국제표준화기구)에서 제안한 통신 규약(Protocol)
    - 하위 계층 : 물 -> 데 -> 네
    - 상위 계층 : 전 -> 세 -> 표 -> 응

  2) 물리 계층(Physical Layer)
    - 두 장치 간의 실제 접속과 절단 등 기계적, 전기적, 기능적, 절차적 특성에 대한 규칙
    - 물리적 전송 매체와 전송 신호 방식 정의
    - RS-232C, X.21
    - 관련 장비 : 리피터, 허브

  3) 데이터 링크 계층(Data Link Layer)
    - 두 개의 인접한 개방 시스템들 간에 신뢰성 있고 효율적인 정보 전송을 할 수 있도록 시스템 간 
      연결 설정과 유지 및 종료 담당
    - 송신 측과 수신 측의 속도 차이 해결을 위한 흐름 제어 기능
    - 프레임의 시작과 끝을 구분하기 위한 프레임의 동기화 기능
    - 오류의 검출과 회복을 위한 오류 제어 기능
    - 프레임의 순서적 전송을 위한 순서 제어 기능
    - HDLC, LAPB, LLC, MAC, LAPD, PPP 등 표준
    - 관련 장비 : 랜카드, 브리지, 스위치

  4) 네트워크 계층(Network Layer)
    - 개방 시스템 간의 네트워크 연결을 관리하는 기능과 데이터의 교환 및 중계 기능
    - 네트워크 연결 설정,유지,해제
    - 경로 설정(Routing), 데이터 교환 및 중계, 트래픽 제어, 패킷 정보 전송
    - X.25, IP
    - 관련 장비 : 라우터

  5) 전송 계층(Transport Layer)
    - 논리적 안정과 균일한 데이터 전송 서비스를 제공함으로써 종단 시스템(End-to-End) 간에 투명한 데이터 전송 가능
    - 하위 3계층과 상위 3계층의 인터페이스 
    - 종단 시스템 간 전송 연결 설정, 데이터 전송, 연결 해제
    - 주소 설정, 다중화, 오류 제어, 흐름 제어
    - TCP, UDP
    - 관련 장비 : 게이트웨이

  6) 세션 계층(Session Layer)
    - 송수신 측 간의 관련성 유지하고 대화 제어
    - 대화 구성 및 동기 제어, 데이터 교환 관리
    - 대화의 생성, 관리, 종료를 위해 토큰 사용
    - 동기점은 오류가 있는 데이터의 회복을 위해 사용, 소동기점(확인 신호 안받음), 대동기점(확인 신호 받음)

  7) 표현 계층(Presentation Layer)
    - 응용 계층으로부터 받은 데이터를 세션 계층에 보내기 전에 통신에 적당한 형태로 변환,
      세션 계층으로부터 받은 데이터를 응요 계층에 맞게 변환
    - 서로 다른 데이터 표현 형태를 갖는 시스템 간의 상호 접속을 위해 필요한 계층
    - 코드 변환, 데이터 암호화, 데이터 압축, 구문 검색, 정보 형식 변환, 문맥관리

  8) 응용 계층(Application Layer)
    - 사용자가 OSI 환경에 접근할 수 있도록 서비스 제공
    - 응용 프로세스 간의 정보 교환, 전자 사서함, 파일 전송, 가상 터미널 등의 서비스 제공

146. TCP/IP
  1) 프로토콜(Protocol)
    - 서로 다른 기기들 간의 데이터 교환을 원할하게 수행할 수 있도록 표준화시켜 놓은 통신 규약
    - 기본 요소
      - 구문(Syntax)
        - 전송하고자 하는 데이터의 형식, 부호화, 신호 레벨
      - 의미(Semantics)
        - 효율적이고 정확한 정보 전송을 위한 협조 사항과 오류 관리를 위한 제어 정보
      - 시간(Timing)
        - 통신 속도, 메시지의 순서 제어
    - 기능
      - 단편화와 재결합, 캡슐화, 흐름 제어, 오류 제어, 동기화, 순서 제어, 주소 지정, 다중화, 경로 제어, 전송 서비스

  2) TCP/IP
    - 인터넷에 연결된 서로 다른 기종의 컴퓨터들이 데이터를 주고받을 수 있도록 하는 표준 프로토콜
    - TCP
      - OSI의 전송 계층
      - 가상 회선 방식을 기반으로 한 연결형 서비스
      - 패킷의 다중화, 순서 제어, 오류 제어, 흐름 제어
    - IP
      - OSI의 네트워크 계층
      - 데이터그램 방식을 기반으로 한 비연결형 서비스
      - 패킷의 분해/조립, 주소 지정, 경로 선택 기능
  
  3) TCP/IP의 구조
    - 응용 계층, 표현 계층, 세션 계층
      - 응용 계층
        - 응용 프로그램 간의 데이터 송수신 제공
        - TELNET, FTP, SMTP, SNMP, DNS, HTTP 등
    - 전송 계층
      - 전송 계층
        - 호스트들 간의 신뢰성 있는 통신 제공
        - TCP, UDP, TRCP
    - 네트워크 계층
      - 인터넷 계층
        - 데이터 전송을 위한 주소 지정, 경로 설정 제공
        - IP, ICMP, IGMP, ARP, RARP
    - 데이터 링크 계층, 물리 계층
      - 네트워크 액세스 계층
        - 실제 데이터(프레임)을 송수신
        - Ethernet, IEEE 802, HDLC, X.25, RS-232C, ARQ 등

  4) 응용 계층의 주요 프로토콜
    - FTP(File Transfer Protocol)
      - 컴퓨터와 컴퓨터 또는 컴퓨터와 인터넷 사이에서 파일을 주고 받을 수 있도록 하는 원격 파일 전송 프로토콜
    - SMTP(Simple Mail Transfer Protocol)
      - 전자 우편을 교환하는 서비스
    - TELNET
      - 멀리 떨어져 있는 컴퓨터에 접속하여 자신의 컴퓨터처럼 사용할 수 있도록 하는 서비스
      - 프로그램을 실행하는 등 시스템 관리 작업을 할 수 있는 가상의 터미널 기능을 수행함
    - SNMP(Simple Network Management Protocol)
      - TCP/IP의 네트워크 관리 프로토콜로, 라우터나 허브 등 네트워크 기기의 네트워크 정보를
        네트워크 관리 시스템에 보내는데 사용되는 표준 통신 규약
    - DNS(Domain Name System)
      - 도메인 네임을 IP주소로 매핑하는 시스템
    - HTTP(HyperText Transfer Protocol)
      - 월드 와이드 웹(WWW)에서 HTML 문서를 송수신하기 위한 표준 프로토콜

  5) 전송 계층의 주요 프로토콜
    - TCP(Transmission Control Protocol)
      - 양방향 연결형 서비스 제공
      - 가상 회선 연결 형태의 서비스 제공
      - 스트림 위주의 전달(패킷 단위)를 함
      - 신뢰성 있는 경로 확립하고 메시지 전송 감독
      - 순서 제어, 오류 제어, 흐름 제어
      - 패킷의 분실, 손상, 지연이나 순서가 틀린 것 등이 발생할 때 투명성이 보장되는 통신을 제공
      - TCP 프로토콜의 헤더는 기본적으로 20byte~60byte까지 사용가능한데, 선택적으로 40byte 추가 가능
    - UDP(User Datagram Protocol) 
      - 비연결형 서비스
      - 단순한 헤더 구조, 오버헤드 적고, 흐름 제어나 순서 제어가 없어 전송 속도가 빠름
      - 실시간 전송에 유리, 신뢰성보다 속도가 중요시되는 네트워크에서 사용
      - 헤더에 Source Port Number, Destination Port Number, Length, Checksum 등이 포함됨
    - RTCP(Real-Time Control Protocol)
      - RTP 패킷의 전송 품질을 제어하기 위한 제어 프로토콜
      - 세션에 참여한 각 참여자들에게 주기적으로 제어 정보 전송
      - 하위 프로토콜은 데이터 패킷과 제어 패킷의 다중화를 제공함
      - 데이터 전송을 모니터링하고 최소한의 제어와 인증 기능 제공
      - RTCP 패킷은 항상 32비트의 경계로 끝남

  6) 인터넷 계층의 주요 프로토콜
    - IP(Internet Protocol)
      - 전송할 데이터에 주소를 지정, 경로 설정
      - 비연결형인 데이터그램 방식, 신뢰성 보장 X
    - ICMP(Internet Control Message Protocol)
      - IP와 조합하여 통신중에 발생하는 오류의 처리와 전송 경로 변경 등을 위한 제어 메시지 관리
      - 헤더는 8Byte로 구성됨
    - IGMP(Internet Group Management Protocol)
      - 멀티캐스트를 지원하는 호스트나 라우터 사이에서 멀티캐스트 그룹 유지를 위해 사용
    - ARP(Address Resolution Protocol)
      - 호스트의 IP 주소를 호스트와 연결된 네트워크 접속장치의 물리적 주소(MAC Address)로 바꿈
    - RARP(Reverse Address Resolution Protocol)
      - ARP와 반대로 물리적 주소를 IP 주소로 변환하는 기능을 함

  7) 네트워크 액세스 계층의 주요 프로토콜
    - Ethernet
      - CSMA/CD 방식의 LAN
    - IEEE 802
      - LAN을 위한 표준 프로토콜
    - HDLC
      - 비트 위주의 데이트 링크 제어 프로토콜
    - X.25
      - 패킷 교환망을 통한 DTE와 DCE 간의 인터페이스를 제공하는 프로토콜
    - RS-232C
      - 공중 전화 교환망(PSTN)을 통한 DTE와 DCE 간의 인터페이스를 제공하는 프로토콜

  









