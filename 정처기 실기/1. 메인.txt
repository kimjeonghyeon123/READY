1. 요구사항
  1) 기능 요구사항
    - 입출력
  2) 비기능 요구사항
  3) 사용자 요구사항
  4) 시스템 요구사항

2. 자료 흐름도
  1) 프로세스(Process)
  2) 자료 흐름(Data Flow)
  3) 자료 저장소(Data Store)
  4) 단말(Terminator)

3. UML
  1) 사물
    - 구조 사물 : 시스템의 개념적 물리적 요소 표현
    - 행동 사물 : 시간과 공간에 따른 요소들의 행위 표현
    - 그룹 사물 : 요소들을 그룹으로 묶어서 표현
    - 주해 사물 : 부가적인 설명이나 제약조건 등을 표현
  2) 관계
    - 연관 관계
    - 집합 관계 : 서로 독립적인 관계
    - 포함 관계 : 포함하는 사물의 변화가 포함되는 사물에게 영향
    - 일반화 관계
    - 의존 관계
    - 실체화 관계
  3) 다이어그램
    - 구조적 다이어그램
      - 객체 다이어그램 : 럼바우 객체 모델링에 사용
      - 클래스 다이어그램 : 클래스와 클래스 아이 관계
      - 컴포넌트 다이어그램 : 구현단계
      - 배치 다이어그램 : 물리적 요소들의 위치 표현, 구현단계
      - 복합체 구조 다이어그램 : 복합 구조를 갖는 경우 내부 구조 표현
      - 패키지 다이어그램 : 그룹화한 패키지들의 관계 표현
    - 행위 다이어그램
      - 유스케이스 다이어그램 : 사용자 요구 분석, 기능 모델링
      - 순차 다이어그램 : 메시지 표현
      - 커뮤니케이션 다이어그램 : 메시지와 객체들 간의 연관 관계 표현
      - 활동 다이어그램 : 처리의 흐름을 순서에 따라 표현
      - 상태 다이어그램 : 럼바우 동적 모델링, 하나의 객체가 상호작용에 따라 어떻게 변화하는지 표현
      - 상호작용 개요 다이어그램 : 상호작용 다이어그램 간의 제어 흐름 표현
      - 타이밍 다이어그램 : 객체 상태 변화와 시간 제약을 명시적으로 표현

  4) 클래스 다이어그램
    - 클래스 간의 관계 표현
    - 클래스, 제약조건, 관계
    - 연관 클래스 : 연관 관계에 있는 두 클래스에 추가적으로 표현해야 할 속성이나 오퍼레이션이 있는 경우 생성하는 클래스

  5) 순차 다이어그램
    - 동적 모델링 : 시스템 내부 구성 요소들의 상태 변화 과정과 상호작용 표현
    - 메시지 주고받으며 상호작용하는 과정 표현
    - 구성요소
      - 액터
      - 객체
      - 생명선
      - 실행 상자
      - 메시지
      - 객체 소멸
      - 프레임
    
  6) 패키지 다이어그램
    - 그룹화한 패키지들 간의 의존 관계 표현
    - 패키지, 객체, 의존 관계

4. 소프트웨어 재사용
  1) 이미 개발된 소프트웨어를 다른 소프트웨어 개발이나 유지에 사용하는 것
    - 합성 중심(블럭 구성 방법) : 블럭 끼워
    - 생성 중심(패턴 구성 방법) : 추상화 형태를 구체화

  2) 소프트웨어 재공학
    - 기존 시스템을 이용해 좋은 소프트웨어, 기능 추가하여 성능 향상

  3) CASE(Computer Aided Software Engineering)
    - 소프트웨어 개발 과정에서 사용되는 요구분석, 설계, 구현 과정을 컴퓨터와 전용 소프트웨어 도구를 사용하여 자동화하는 것
    - 생명 주기 전 단계 연결, 개발 모형 지원, 그래픽 지원

5. 상향식 비용 산정 기법
  1) LOC(source Line Of Code) 기법
    - 예측치 = (낙관치 + 4*기대치 + 비관치) / 6

6. 수학적 산정 기법
  - COCOMO 모형
    - 보헴, LOC
    - 조직형, 반분리형, 내장형
  - Putnam 모형
    - 소프트웨어 생명 주기 전 과정 동안에 사용될 노력의 분포 예상
    - Rayleigh-Norden 곡선
  - 기능 점수(FP) 모형
    - 소프트웨어 기능을 증대시키는 요인별 가중치 부여
    - 자료입력, 정보출력, 명령어, 데이터 파일, 인터페이스
  - 비용 산정 자동화 추정 도구
    - SLIM : Putnam 모형
    - ESTIMACS : FP 모형

7. 프로젝트 일정 계획
  1) PERT
    - 전체 작업의 상호 관계 표시하는 네트워크
  
  2) CPM
    - 작업을 나열하고 작업에 필요한 소요 기간 예측
    - 임계 경로 : 최장 경로

  3) 간트 차트
    - 시간선 차트
    - 막대 도표 사용하여 프로젝트 일정표

8. 소프트웨어 개발 표준
  1) ISO/IEC 12207
    - 표준 소프트웨어 생명 주기 프로세스
    - 기본 생명 주기 프로세스, 지원 생명 주기 프로세스, 조직 생명 주기 프로세스

  2) CMMI(능력 성숙도 통합 모델)
    - 개발 조직의 업무 능력 및 성숙도 평가 모델
    - 초기, 관리, 정의, 정량적 관리, 최적화(초관정정최)

  3) SPICE(소프트웨어 처리 개선 및 능력 평가 기준)
    - ISO/IEC 15504
    - 소프트웨어 품질, 생산성 향상
    - 고객-공급자, 공학, 지원, 관리, 조직(고공 지원 관리조직)
    - 불완전, 수행, 관리, 확립, 예측, 최적화(불수관확예최)

8. 소프트웨어 개발 프레임워크
  1) 스프링 프레임워크 : 자바
  2) 전자정부 프레임워크 : 공공부문 정보화 사엄
  3) 닷넷 프레임워크 : Windows 프로그램의 개발 및 실행 환경 제공하는 프레임워크
  4) 모듈화, 재사용성, 확장성, 제어의 역흐름(모재확제)

9. 데이터베이스(통저운공)
  1) 통합된 데이터
  2) 저장된 데이터
  3) 운영 데이터
  4) 공용 데이터

10. DBMS 필수 기능
  1) 정의, 조작, 제어(정조제)

11. 스키마(데이터베이스 구조와 제약조건에 관한 전반적인 명세를 기술한 것)
  1) 외부 스키마 : 각 개인의 입장에서 필요로 하는 데이터베이스 논리적 구조
  2) 개념 스키마 : 전체적인 논리적 구조, 하나만 존재
  3) 내부 스키마 : 물리적 저장장치 입장의 데이터베이스 구조, 데이터 형식 등

12. 데이터베이스 설계
  1) 고려사항
    - 무결성, 일관성, 회복, 보안, 효율성, 데이터베이스 확장
  
  2) 순서
    - 요구 조건 분석
    - 개념적 설계(정보 모델링)
      - 현실 세계를 추상적 개념으로 표현
    - 논리적 설계(데이터 모델링)
      - 특정 DBMS가 지원하는 논리적 자료 구조로 매핑
      - 트랜잭션 인터페이스 설계
    - 물리적 설계(데이터 구조화)
    - 구현

13. 데이터 모델
  1) 데이터 모델 구성 요소(개속 관계)
    - 개체, 속성, 관계
  2) 데이터 모델에 표시할 요소(구연산 제약)
    - 구조, 연산, 제약 조건

14. E-R 모델
  1) 개체, 속성, 관계
  2) 피터 첸

15. 관계형 데이터 모델
  1) 코드
  2) 2차원 적인 표를 이용해 데이터 상호 관계 정의하는 데이터베이스

16. 키
  1) 유일성 최소성

17. 무결성
  1) 데이터베이스 값과 현실 세계 값이 일치하는 정확성
  2) 무결성 종류
    - 개체 무결성 : 기본키는 null이나 중복값을 가질 수 없음
    - 참조 무결성 : 외래키 값은 null이거나 참조 릴레이션의 기본키 값과 동일
    - 도메인 무결성 : 도메인에 속한 값
    - 사용자 정의 무결성 : 정의한 제약 조건 만족해야 함
    - NULL 무결성 : 특정 속성이 null이 될 수 없음
    - 고유 무결성 : 특정 속성은 서로 달라야 함
    - 키 무결성 : 키 하나는 존재해야 함
    - 관계 무결성 : 관계에 대한 적정성 여부
  3) 무결성 강화
    - 애플리케이션
    - 데이터베이스 트리거
    - 제약 조건

18. 관계 대수 및 관계 해석
  1) 관계 대수 : 원하는 정보를 검색하기 위한 절차적인 언어
  2) 순수 관계 연산자
    - Select : 시그마
    - Project : 파이
    - Join : 리본
    - Division : ÷
  3) 일반 집합 연산자
    - 합집합(UNION) : ∪
    - 교집합(INTERSECTION) : ∩
    - 차집합(DIFFERENCE) : -
    - 교차곱(CARTESIAN PRODUCT) : X

  4) 관계해석
    - 관계 데이터의 연산 표현
    - 코드

19. 이상
  1) 이상(삽삭갱)
    - 데이터 중복이 발생하고, 중복으로 문제가 발생하는 현상
    - 삽입 이상
      - 의도와는 상관없이 원하지 않는 값들로 인해 삽입할 수 없게 되는 현상
    - 삭제 이상
      - 의도와는 상관없는 값들도 같이 삭제되는, 연쇄 삭제 현상
    - 갱신 이상
      - 갱신할 때 일부 튜플만 바뀌는 정보의 불일치성 현상
  
  2) 함수적 종속
    - 완전 함수적 종속(Full)
    - 부분 함수적 종속(Partial)
    - 이행적 함수적 종속(Transitive)

20. 정규화
  1) 테이블들의 속성들이 상호 종속적인 관계를 갖는 특성을 이용해 테이블을 무손실분해하는 과정
  2) 두부이걸다조
    도메인 원자값
    부분적 함수 종속 제거
    이행적 함수 종속 제거
    결정자이면서 후보키 아닌 것 제거
    다치 종속 제거
    조인 종속성 이용
  
21. 반정규화(정규화된 데이터 모델을 의도적으로 테이블 통합, 중복, 분리하여 정규화 원칙을 위배하는 행위)
  1) 테이블 통합
  2) 테이블 분할
  3) 중복 테이블 추가
    - 집계 테이블 추가 : 트리거
    - 진행 테이블 추가 : 이력 관리
    - 특정 부분만을 포함하는 테이블 추가
  4) 중복 속성 추가

22. 트랜잭션
  1) 한꺼번에 수행되어야 할 일련의 연산
  2) 특징
    - 원자성 : 트랜잭션의 연산은 모두 실행되거나 모두 실행되지 않아야 한다.
    - 일관성 : 실행을 완료하면 언제나 일관성 있는 데이터베이스 상태로 변환한다.
    - 격리성 : 트랜잭션이 병행 실행되는 경우 실행 중에 다른 연산이 끼어들 수 없다.
    - 지속성 : 성공적으로 완료된 트랜잭션의 결과는 영구적으로 반영되어야 함
  3) CRUD 분석

23. 뷰/클러스터
  1) 뷰 : 하나 이상의 기본 테이블로부터 유도된 가상 테이블
  2) 클러스터 : 동일한 성격의 데이터를 동일한 데이터 블록에 저장하는 물리적 저장 방법
  3) 단일 테이블 클러스터, 다중 테이블 클러스터

24. 파티션
  1) 대용량 테이블 작은 논리적 단위인 파티션으로 나누는 것
  2) 종류(범해조)
    - 범위 분할
    - 해시 분할
    - 조합 분할

25. 데이터베이스 이중화
  1) 동일한 데이터베이스를 복제하여 관리하는 것
    - Eager 기법 : 데이터 변경 시 즉시 전달 즉시 적용
    - Lazy 기법 : 트랜잭션 종료 시 트랜잭션 전달
    - 활동-대기 방법
    - 활동-활동 방법
  2) 클러스터링 : 두 대 이상 서버를 하나의 서버처럼 운영하는 기술
    - 고가용성 클러스터링 : 장애 시 다른 서버가 받아 처리하여 중단 방지
    - 병렬처리 클러스터링 : 하나의 작업을 여러 개의 서버에서 분산 처리
  
  3) RTO(중단 시점~가동시점), 
     RPO(중단시점으로부터 데이터 복구 가능한 기준점)

26. 데이터베이스 보안
  1) 암호화
  2) 접근 통제(정메보)
    - 접근통제 정책
    - 접근통제 메커니즘
    - 접근통제 보안모델
  3) 접근 통제 기술
    - 임의 접근 통제(DAC) : 소유자
    - 강제 접근 통제(MAC) : 시스템
    - 역할 기반 접근 통제(RBAC) : 중앙관리자
  4) 접근 통제 보안 모델(기무접)
    - 기밀성 모델
    - 무결성 모델
    - 접근통제 모델
  5) 접근통제 조건
    - 값 종속 통제
    - 다중 사용자 통제
    - 컨텍스트 기반 통제

27. 로그 파일
  1) 상태 변화를 시간의 흐름에 따라 모두 기록한 파일
  2) REDO : 재시도, UNDO : 취소

28. 스토리지
  1) 대용량 데이터 저장하기 위해 서버와 저장장치를 연결하는 기술
  2) DAS : 직접 연결
  3) NAS : 네트워크로 연결, Ethernet 스위치
  4) SAN : 서버와 저장장치를 연결하는 전용 네트워크 구성, 광채널 스위치

29. 이진 트리
  preorder : 중 왼 오
  inorder : 왼 중 오
  postorder : 왼 오 중

30. 정렬
  1) 삽입 정렬 : 회차마다 그 자리의 값과 비교하여 삽입 후 밀어내기, 1회차는 2와 1 비교, 2회차는 3과 1,2 비교
  2) 선택 정렬 : 회차마다 그 자리의 값을 최소값으로 만듦, 서로 교환, 1회차는 1번이 최소, 2회차는 2번이 최소
  3) 버블 정렬 : 바로 옆 값과 비교후 자리 바꾸기
  4) 쉘 정렬 : 서브 파일 구성 후 삽입 정렬, O(n^1.5) O(n^2)
  5) 퀵 정렬 : 키를 기준으로 큰 값 오른쪽, 작은 값 왼쪽 O(nlogn) O(n^2)
  6) 힙 정렬 : 전이진 트리 O(nlogn) O(nlogn)
  7) 2-Way 합병 정렬 : 정렬된 두 파일을 한개로 합병 O(nlogn) O(nlogn)
  8) 기수 정렬 : 자릿수별 정렬 O(dn) O(dn)
  
31. XML
  1) 특수한 목적을 갖는 마크업 언어를 만드는 데 사용되는 다목적 마크업 언어
  2) SOAP 
    - 네트워크 상에서 HTTP/HTTPS, SMTP 등을 이용하여 XML을 교환하기 위한 통신 규약
  3) WSDL
    - 웹 서비스와 관련된 서식이나 프로토콜을 표준적인 방법으로 기술하기 위한 언어
    - SOAP, XML 결합

32. 소프트웨어 아키텍처
  1) 소프트웨어를 구성하는 요소들 간의 관계를 표현하는 시스템의 구조(모추단정)
    - 모듈화
    - 추상화
      - 제어 추상화
      - 과정 추상화
      - 자료 추상화
    - 단계적 분해
    - 정보 은닉
  2) 품질(시비아)
    - 시스템 측면
    - 비즈니스 측면
    - 아키텍처 측면
  3) 협약에 의한 설계
    - 선행 조건 : 오퍼레이션 호출 전 참
    - 결과 조건 : 오퍼레이션 수행 후 참
    - 불변 조건 : 오퍼레이션 실행 중 참

33. 아키텍처 패턴
  1) 레이어 패턴
  2) 클라이언트-서버 패턴
  3) 파이프-필터 패턴
  4) 모델-뷰-컨트롤러 패턴
  5) 마스터-슬레이브 패턴 : 장애 허용 시스템, 병렬 컴퓨팅 시스템
  6) 브로커 패턴 : 분산 환경 시스템
  7) 피어-투-피어 패턴
  8) 이벤트-버스 패턴
  9) 블랙보드 패턴
  10) 인터프리터 패턴

34. 객체지향
  1) 객체(데이터 함수 묶음), 클래스(객체의 집합), 메시지(상호작용)(객클메)
  2) 캡슐화, 상속, 다형성, 연관성
  3) is member of   : 연관화
     is instance of : 분류화
     is part of     : 집단화
     is a           : 일반화, 특수화

35. 객체지향 분석
  1) 방법론
    - Rumbaugh 방법 : 객동기 모델
    - Booch 방법 : 미시적 거시적
    - Jacobson 방법 : 유스케이스
    - Coad와 Yourdon 방법 : e-r 다이어그램
    - Wirfs-Brock 방법 : 명세서 평가

  2) 럼바우
    - 객체(Object) 모델   : 정보(Information) 모델링, 객체 다이어그램
    - 동적(Dynamic) 모델링 : 상태 다이어그램
    - 기능(Function) 모델링 : 자료 흐름도(DFD)

  3) 설계 원칙(SOLID)
    - SRP : 객체 한개의 책임
    - OCP : 코드 변경 없이 기능 추가
    - LSP : 자식은 부모 다 수행 가능해야 함
    - ISP : 사용지 않는 인터페이스와 의존 관계X
    - DIP : 추상성 높은 클래스와 의존 관계

36. 모듈
  1) 결합도(짜스 제외하고 공통내용)
    - 내용 결합도 : 내부 자료 직접 참조
    - 공통 결합도 : 공유되는 공통 데이터 영역 여러 모듈 참조
    - 외부 결합도 : 다른 모듈 변수를 외부 모듈이 사용
    - 제어 결합도 : 논리적 흐름 제어하기 위한 신호 전달, 권리 전도 현상(하위가 상위에 명령)
    - 스탬프 결합도 : 배열이나 레코드 자료구조 전달
    - 자료 결합도 : 자료 요소로만 구성
  2) 응집도(기능순차교환절차 시 논리가 우연이야)
    - 기능적 응집도 : 모든 기능 요소가 단일 문제
    - 순차적 응집도 : 출력 데이터 -> 입력 데이터
    - 교환적 응집도 : 동일한 입출력 다른 기능
    - 절차적 응집도 : 순차적 수행
    - 시간적 응집도 : 특정 시간
    - 논리적 응집도 : 유사 성격
    - 우연적 응집도 : 관련 없는 요소
  3) 팬 인/팬 아웃
    - 팬 인 : 화살표 인
    - 팬 아웃 : 화살표 아웃
  4) N-S 차트
    - 논리의 기술에 중점을 두고 도형을 이용해 표현

37. 단위 모듈
  1) IPC
    - 모듈 간 통신 방식을 구현하기 위해 사용되는 대표적인 프로그래밍 인터페이스 집합
    - Shared Memory
    - Socket
    - Semaphores : 공유 자원에 대한 접근 제어를 통해 통신
    - Pipes&named Pipes
    - Message Queueing

  2) 테스트 케이스
    - 요구사항을 정확하게 준수했는지 테스트 항목에 대한 명세서

38. 공통 모듈
  1) 기법 종류(정명완일추)
    - 정확성 : 기능이 필요한지 작성
    - 명확성 : 중의적 해석X
    - 완전성 : 모든 것 기술
    - 일관성
    - 추적성
  2) 재사용(함컴애플)
    - 함수와 객체
    - 컴포넌트
    - 애플리케이션 

39. 디자인 패턴
  1) 생성 패턴(추상훈 보디빌더 팩하다 프로에서 떨어져서 싱글됨)
    - 추상 팩토리 : 추상적으로 표현
    - 빌더 : 객체 생성과 표현을 분리
    - 팩토리 메소드 : 가상 생성자, 객체 생성을 서브 클래스에서 처리
    - 프로토타입
    - 싱글톤
  2) 구조 패턴(어브바 컴퓨터 데코 퍼플프)
    - 어댑터 : 변환
    - 브리지 : 구현부 추상층 분리, 기능과 구현을 두 개의 별도 클래스로 구현
    - 컴포지트 : 복합 객체와 단일 객체 구분없이 다루고
    - 데코레이터 : 객체 결합을 통해 능동적으로 기능 확장
    - 퍼사드 : 복잡한 서브 클래스 피해 상위 인터페이스 구성, Wrapper 객체 필요
    - 플라이웨이트 : 인스턴스 가능한 공유
    - 프록시 : 접근 어려운 객체 사이에서 인터페이스 역할
  3) 행위 패턴(책임이 커 인터밀란 반복적으로 중재 메멘 옵서 상전 가서 템)
    - 책임 연쇄 : 처리를 다음 객체로 넘기는 것
    - 커맨드 : 캡슐화하여 로그에 남김, 명령어
    - 인터프리터 : 문법 표현 정의, SQL, 통신 프로토콜 개발 시 사용
    - 반복자 : 접근이 잦은 객체에 대해 동일한 인터페이스, 내부 표현 방법 노출 없이 순차적 접근
    - 중재자 : 객체 간 상호작용을 캡슐화
    - 메멘토 : 특정 시점에서 내부 상태 객체화, Ctrl+Z
    - 옵서버 : 상태 전달, Publish, Subscribe
    - 상태 : 상태에 따라 동일한 동작 다르게 처리
    - 전략 : 동일한 계열의 알고리즘을 개별적으로 캡슐화 상호 교환
    - 템플릿 메소드 : 상위 클래스 골격 정의, 하위 클래스 세부 처리
    
40. 미들웨어 솔루션
  1) DB
  2) RPC : 운격 프로시저를 로컬 프로시저 처럼 호출
  3) MOM : 비동기형 메시지 전달
  4) TB-Monitor : 트랜잭션 처리 및 감시
  5) ORB : 코바 표준 스펙 구현
  6) WAS : 동적 콘텐츠 처리

41. 모듈 연계
  1) EAI : 애플리케이션 및 플랫폼 간 정보 전달 등 상호 연동 가능하게 해줌
    - Point-to-Point
    - Hub & Spoke
    - Message Bus(ESB방식)
    - Hybrid
  2) ESB : 표준 기반의 인터페이스 제공
  3) 웹 서비스
    - SOAP : HTTP/HTTPS 에서 XML 기반 메시지 네트워크 상에서 교환
    - UDDI : WSDL 등록
    - WSDL : 웹 서비스 관련된 서식이나 프로토콜 등을 표준 방법으로 기술하기 위한 언어

42. 인터페이스 보안
  1) IPSec : 네트워크 계층에서 IP 패킷 단위 데이터 변조 방지 및 은닉 기능 제공
  2) SSL : TCP/IP 계층과 애플리케이션 계층 사이 인증, 암호화, 무결성 보장
  3) S-HTTP : 클라이언트와 서버 사이 모든 메시지 암호화
  4) 무결성 검사 도구
    - Tripwire
    - AIDE
    - Samhain
    - Claymore
    - Slipwire
    - Fcheck

43. 인터페이스 구현 검증
  1) 도구
    - xUnit : 같은 코드 여러번 작성하지 않게 도와줌
      - JUnit : 자바용 프레임워크
    - STAF : 서비스 호출 및 컴포넌트 재사용 환경 지원, 데몬
    - FitNesse : 웹 기반 테스트 케이스 
    - NTAF : 위 두개 합친거
    - Selenium : 다양한 브라우저, 언어 지원
    - Watir : Ruby

  2) APM : 애플리케이션 성능 관리
    - 스카우터(Scouter) : OS 자원
    - 제니퍼(Jennifer) : 전 단계 성능 모니터링

44. 사용자 인터페이스(UI)
  1) 구분
    - CLI
    - GUI
    - NUI
  2) 기본 원칙(직유학유)
    - 직관성 : 쉽게 이해
    - 유효성 : 목적 정확히 달성
    - 학습성 : 쉽게 배움
    - 유연성 : 요구사항 최대한 수용, 실수 최소화

45. UX
  1) HCI : 사람이 시스템을 편리하게 사용할 수 있도록 하는 학문
  2) UX : 시스템을 이용하면서 느끼는 총체적인 경험
    - 주관성
    - 정황성
    - 총체성
  3) 감성공학 : 감성에 맞게 제작

46. 애플리케이션 테스트
  1) 기본 원리
    - 파레토 법칙 : 앱의 20%에 해당하는 코드에서 전체 결함의 80%가 발견됨
    - 살충제 패러독스 : 동일한 테스트케이스로 동일한 테스트 반복 시 결함이 발견되지 않음
    - 오류-부재의 궤변 : 결함 제거해도 요구사항 만족 못하면 품질이 낮은것

47. 테스트
  1) 실행 여부
    - 정적 테스트 : 실행 X 워크스루, 인스펙션, 코드 검사
    - 동적 테스트 : 실행 O 블랙박스 테스트, 화이트박스 테스트
      - 화이트박스 테스트(논리적인 모든 경로를 테스트)
        - 기초 경로 검사
        - 제어 구조 검사(조루데)
          - 조건 검사, 루프 검사, 데이터 흐름 검사
        - 검증 기준(문분조)
          - 문장 검증 기준, 분기 검증 기준, 조건 검증 기준, 분기/조건 검증 기준
      - 블랙박스 테스트(기능 테스트, 각 기능이 완전히 작동되는지 입증)
        - 동치 분할 검사(동경원오비)
        - 경계값 분석
        - 원인-결과 그래프 검사
        - 오류 예측 검사
        - 비교 검사

  2) 테스트 기반
    - 명세 기반 테스트 : 명세 기반
    - 구조 기반 테스트 : 내부 논리 흐름
    - 경험 기반 테스트 : 경험 기반

  3) 시각
    - 검증 : 개발자 제품의 생산과정 테스트
    - 확인 : 사용자 생산된 제품의 결과 테스트

  4) 목적
    - 강도가 성추행해서 안전구조되서 병원에서 회복하다가 회귀
    - 강도 : 과부하
    - 성능 : 효율
    - 안전 : 불법적 침입 보호
    - 구조 : 내부 경로, 복잡도
    - 병행 : 기존 소프트웨어와 비교
    - 회복 : 올바르게 복구되는지
    - 회귀 : 변경된 코드에 결함 없는지

48. V-모델
  1) 요구사항 분석
  2) 분석
  3) 설계
  4) 구현
  5) 단위테스트 : 구조기반테스트, 명세기반테스트
  6) 통합테스트 
    - 하향식 통합 테스트(하스텁)
      - 깊이 우선 통합법, 넓이 우선 통합법
      - 스텁 : 제어 모듈이 호출하는 타 모듈의 기능을 단순히 수행하는 도구, 일시적으로 필요한 조건만을 가지고 있는 시험용 모듈
    - 상향식 통합 테스트
      - 클러스터 : 종속 모듈의 그룹
      - 드라이버 : 테스트 대상의 하위 모듈 호출, 파라미터 전달, 결과 도출
    - 혼합식 통합 테스트
      - 샌드위치 통합 테스트 방법
    - 회귀 테스팅
      - 통합된 모듈에 새로운 오류가 있는지 확인
  7) 시스템테스트
  8) 인수테스트 : 알파테스트, 베타테스트

49. 테스트
  1) 테스트 케이스
  2) 테스트 시나리오 : 테스트 케이스 순서대로 묶음
  3) 테스트 오라클(참샘추일) : 테스트 결과가 올바른지 값을 대입해 비교
    - 참 오라클 : 모든 입력값 대입
    - 샘플링 오라클 : 샘플 데이터만 대입
    - 추정 오라클 : 특정 케이스 대입, 나머지 추정
    - 일관성 검사 오라클 : 수행 전과 수행 후가 같은지 확인

50. 애플리케이션 성능 분석
  1) 지표(처리하는데 응답시간 경과시간 자원 사용률)
    - 처리량
    - 응답 시간 : 요청 전달 시간
    - 경과 시간 : 작업 의뢰 시간
    - 자원 사용률
  2) 성능 테스트 도구, 시스템 모니터링 도구

51. 애플리케이션 성능 개선
  1) 클린 코드(가단의 중추)
    - 가독성
    - 단순성
    - 의존성 배제
    - 중복성 최소화
    - 추상화
  2) 스파게티 코드
  3) 외계인 코드
  4) 정적분석도구, 동적분석도구

52. 운영체제
  1) Windows
    - 마이크로소프트사 개발
    - GUI, PnP, 선점형 멀티태스킹, OLE, 255자의 긴 파일명, Single-User 시스템
  2) UNIX
    - 시분할 시스템, 개방형, 다중 사용자, 다중 작업, 트리구조
    - 커널 : 하드웨어와 프로그램 간의 인터페이스
    - 쉘 : 명령어 인식, 프로그램 호출, 명령 수행
    - 유틸리티 프로그램 : 사용자가 작성한 응용 프로그램 처리(에디터, 컴파일러)
  3) LINUX
    - 리누스 토발즈(UNIX 기반)
    - UNIX와 완벽하게 호환
  4) MacOS
    - 애플 사 UNIX 기반 개발, 아이맥, 맥북
  5) Android
    - 구글 사 리눅스 커널 기반 모바일 운영체제
  6) iOS
    - 애플 사 유닉스 기반 모바일 운영체제

53. 페이지 교체 알고리즘
  1) 페이지 부재 발생 시 어떻게 교체할건지
  2) OPT : 앞으로 오랫동안 사용되지 않을 페이지 교체
  3) FIFO : 가장 먼저 들어와 가장 오랫동안 있던 페이지 교체
  4) LRU : 최근에 가장 오래 사용하지 않은 페이지 교체
  5) LFU : 사용 빈도가 가장 적은 페이지 교체
  6) NUR : 최근에 사용하지 않은 페이지 교체, 참조비트, 변형비트
  7) SCR : 오랫동안 주기억장치에 있던 페이지 중 자주 사용되는 페이지의 교체 방지

  Locality : 프로세스 실행동안 주기억장치를 참조할 때 일부 페이지만 집중적으로 참조
           : Temporal Locality, Spatial Locality
  워킹 셋 : 프로세스가 일정 시간동안 자주 참조하는 페이지들의 집합
  스래싱 : 처리 시간보다 페이지 교체에 시간이 더 많아지는 현상

54. 프로세스
  1) 실행중인 프로그램
  2) PCB(Process Control Block) : 운영체제가 프로세스에 대한 중요한 정보를 저장해 놓는 곳
             Dispatch   
    ┌-> 준비 ----> 실행 -----> 대기 
    └--------------------------┘
      Wake Up
  3) 스레드 : 경량 프로세스

55. 스케줄링
  1) FCFS(=FIFO) : 먼저 온 거 먼저
  2) SJF(Shortest Job First) : 실행 시간 짧은 거 먼저
  3) HRN(Highest Reponse-ratio Next) : 대기시간과 서비스 시간 이용
    - 우선순위 = (대기시간 + 실행시간) / 실행시간
  4) RR(Round Robin) : 시간 할당량 동안만 실행 후 넘김
  5) SRT(Shortest Remaining Time) : 남은 시간과 새로 온 실행 시간을 비교해 짧은 거 실행

56. chmod rwx r-x --x a.txt
    chmod 751 a.txt

57. IPv6(멀애유)
  1) 멀티캐스트, 애니캐스트, 유니캐스트
  2) 128비트, 16비트씩 4부분, 콜론으로 구분 

58. OSI 참조 모델
  1) 물리 계층 : 직접 연결
  2) 데이터 링크 계층 : 인접한 개방 시스템 간, 흐름제어, 오류제어, 순서제어
  3) 네트워크 계층 : 경로 설정
  4) 전송 계층 : 종단 시스템 간 투명하게 전송, 오류제어, 흐름제어
  5) 세션 계층 : 토큰, 대화 담당
  6) 표현 계층 : 변환, 번역
  7) 응용 계층 : 서비스 제공

59. 프로토콜
  1) 기본 요소
    - 구문 
    - 의미 
    - 시간
  2) TCP
    - 전송 계층
    - 가상회선 방식 연결형 서비스
  3) IP
    - 네트워크 계층
    - 데이터그램 방식 비연결형 서비스

  4) 전송 계층 주요 프로토콜
    - TCP
    - UDP
    - RTCP
  4) 인터넷 계층 주요 프로토콜
    - IP : 비연결형 데이터그램
    - ICMP : IP 조합, 통신 중 제어 메시지 관리
    - IGMP : 멀티캐스트 그룹 유지
    - ARP : IP주소를 물리적 주소 MAC Address로 바꿈
    - RARP : 물리적 주소를 IP주소로 바꿈

60. 네트워크 구축(성링버계망)
  1) 성형
  2) 링형
  3) 버스형
  4) 계층형
  5) 망형
  6) NAT(네트워크 주소 변환) : 한 개의 정식 IP주소에 대량의 가상 사설 IP 주소 할당 및 연결

61. 경로 제어 프로토콜
  1) IGP
    - RIP(Routing Information Protocol)
    - OSPF(Open Shortest Path First protocol)
  2) EGP
    - AS 간 라우팅
  3) BGP : EGP 단점 보완

  4) 트래픽 제어 : 전송되는 패킷의 흐름 또는 그 양을 조절하는 기능(흐폭교)
    - 흐름 제어
      - 정지-대기
      - 슬라이딩 윈도우
    - 폭주 제어
      - 느린 시작
      - 혼잡 회피
    - 교착상태 방지

62. ISMS(Information Security Management System)
  1) 정보 자산 보호하기 위한 프로그램 평가
  2) 정보 보호 관리 체계

63. 회복/병행제어
  1) 회복 : 손상되었을 때 손상되기 전 상태로 복구하는 작업
    - 연기 갱신 기법 : Redo만 가능
    - 즉각 갱신 기법 : 둘 다 가능
    - 그림자 페이지 대체 기법
    - 검사점 기법
  2) 병행제어
    - 갱신 분실, 비완료 의존성, 모순성, 연쇄 복귀
    - 로킹 : 락 요청, 허락되어야만 액세스 가능
    - 타임 스탬프 순서 : 시간표
    - 최적 병행 수행  : 읽기 트랜잭션이 많을 경우 충돌률이 낮음
    - 다중 버전 기법

64. 교착상태
  1) 4가지 요건(상점비환)
    - 상호 배제
    - 점유와 대기
    - 비선점
    - 환형 대기
  2) 해결방법
    - 예방 기법
    - 회피 기법 : 은행원 알고리즘
    - 발견 기법 : 교착상태 발견 알고리즘
    - 회복 기법 : 종료, 선점

65. 형상 관리
  1) SCM, 소프트웨어 개발 과정 중 변경 사항 관리
  2) 형상관리기능(식별 버전 통감기)
    - 형상 식별
    - 버전 제어
    - 형상 통제
    - 형상 감사
    - 형상 기록
66. 빌드 자동화 도구
  1) Jenkins : JAVA 기반, 서블릿 컨테이너
  2) Gradle : Groovy 기반 안드로이드

P.115, P.117, P.127, P.413, P.438, P.435, P.439, P.482

