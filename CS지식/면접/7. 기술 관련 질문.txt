1. 프로젝트 관련 질문

----------------------------------------------------------------------------

1. 어떤 프로젝트 진행했죠?

반려인들을 위한 편의 서비스를 제공하는 웹 사이트를 개발했습니다.
백엔드에서는 java, spring, postgresql 등을 활용했고, 
프론트에서는 jsp, javascript, jquery 등을 활용해 개발을 진행했습니다.
저는 중고거래게시판과 채팅 부분을 맡았습니다.
주요 사용 기술로는 중고거래게시판에서 지역별로 게시물을 분류하기 위해 공공
데이터포털의 시군구 api를 사용하였습니다. 그리고 좋아요 기능을 위해 ajax 
비동기 통신을 활용했습니다.
채팅은 카카오톡과 같은 서비스를 제공하기 위해서 websocket을 활용해 구현했습니다. 

----------------------------------------------------------------------------

2. api를 어떻게 활용했죠?

api는 두 개 이상의 컴퓨터 프로그램이 서로 통신하는 방법을 뜻합니다.
api를 사용하게 되면 개발 과정이 단순화된다는 장점이 있습니다. 처음에는 api라는
것을 잘 몰라서 직접 시군구 데이터를 입력했습니다. 하지만 서울만 해도 너무나 많은 지역들이 있기 때문에 일일히 입력하기가 힘들다는 것을 깨닫고 방법에 대해서
찾다가 api라는 것을 알게 되었고 공공데이터포털에서 시군구 api를 제공해주는 것을 보고 사용하게 되었습니다.

----------------------------------------------------------------------------

3. 지역 데이터를 어떻게 가져왔는지 설명해주세요

URLBuilder를 통해 API 엔드포인트와 요청 파라미터를 구성하여 URL을 생성합니다.
HttpURLConnection을 통해 생성된 URL로 GET 요청을 보내고 BufferedReader를 사용해 json 형식의 데이터를 받아옵니다. 제가 원하는 데이터는 지역 이름과 지역 코드이기 때문에 이에 맞는 특정 키를 JSONObject와 JSONArray를 활용하여 입력해 데이터베이스 테이블에 저장하였습니다.

----------------------------------------------------------------------------

3. 힘든 점

처음에는 프론트에서 직접 api를 호출했지만 cors 에러가 나는 상황이 나와서 이를 해결하기 위해 서버에서 api를 호출했습니다. cors 는 cross origin resource sharing의 약자로 한 도메인에서 다른 도메인이 가진 리소스에 접근 할 수 있게 해주는 보안 매커니즘입니다. 

채팅 같은 경우에는 여러가지 기능이 있었지만 특히 나가기 기능을 구현하는 것이 어려웠습니다. A와 B가 채팅을 할 때, A가 나간다고 해서 채팅방이 삭제되는 것이 아니라 B에게는 채팅방과 채팅내역이 보이도록 구현하였습니다. 다시 채팅이 시작될 때 A는 나간 이후 새로 채팅이 오가도록 구현하였습니다. 
이를 위해 채팅방 테이블에 나감 여부와 나간 시간을 추가해서 구현할 수 있었습니다. 

----------------------------------------------------------------------------

5. websocket이 뭐야?

웹소켓을 클라이언트가 서버가 실시간으로 양방향 통신이 가능하도록 하는 통신 프로토콜입니다. 기존의 http 같은 경우는 클라이언트가 서버에 요청을 보내고 서버에서 응답을 한 뒤 연결이 끊어지도록 설계되어있습니다. 하지만 웹소켓은 서버와의 연결이 유지되기 때문에 실시간으로 양방향 통신이 가능합니다. 

----------------------------------------------------------------------------

6. websocket 작동 방법 설명해줘

채팅 페이지에 들어가게 되면 자바스크립트에서 웹소켓 객체를 생성합니다.
그리고 객체를 생성할 때 사용한 엔드포인트로 웹소켓에 연결하고 웹소켓 세션을 서버에 등록합니다. 그 이후 실시간으로 연결할 수 있고 채팅 페이지를 나갈 경우 웹 소켓 세션을 서버에서 삭제하고 종료합니다.

----------------------------------------------------------------------------

7. 리눅스 뭐 배웠어?

리눅스에서 UNIX 기반의 오픈소스 운영체제입니다. c 언어를 사용해 리눅스 쉘의 명령어들을 만들어보았고 fork()를 통해 멀티 프로세스가 어떠한 방식으로 돌아가는지 배웠습니다. 학기 말 프로젝트로는 채팅 기능을 만들어보았습니다.


----------------------------------------------------------------------------

8. mvc 패턴이 뭐야?

모델 뷰 컨트롤러로 웹 개발을 하는 방법 중 하나입니다. 관심사를 3개로 분리함으로써 업무 분담과 유지보수를 용이하게 합니다.
사용자의 요청을 컨트롤러가 받고 비지니스 로직을 처리한 후 모델에 담으면 모델에 담긴 데이터로 뷰를 구성해 사용자에게 전달합니다.

----------------------------------------------------------------------------
연결 지향성 (Connection-Oriented) vs. 비연결성 (Connectionless):

TCP: 연결 지향성을 가지고 있습니다. 통신을 시작하기 전에 연결을 설정하고, 통신이 끝나면 연결을 정리합니다.
UDP: 비연결성을 가지고 있습니다. 각 패킷은 독립적으로 처리되며 연결 설정 및 해제 단계가 없습니다.
----------------------------------------------------------------------------

Node.js는 I/O 중심 작업을 다루는 데 강점을 가지고 있습니다. 비동기 이벤트 루프와 논 블로킹 I/O 모델을 통해 많은 동시 연결을 효과적으로 처리할
----------------------------------------------------------------------------
