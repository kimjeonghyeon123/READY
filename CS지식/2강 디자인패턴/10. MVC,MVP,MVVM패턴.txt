1. MVC 패턴
  1) 모델, 뷰, 컨트롤러
    - 사용자로부터 요청을 컨트롤러가 받으면 비즈니스 로직을 거친 뒤에 모델에 담아 
      뷰에 전달하면 뷰가 모델에 있는 정보를 바탕으로 화면을 구성하여 사용자에게 응답
    - 모델
      - 뷰에서 데이터 생성,수정할 때 컨트롤러를 통해 모델이 생성 업데이트 됨
    - 뷰
      - 모델을 기반으로 사용자가 볼 수 있는 화면
    - 컨트롤러
      - 하나 이상의 모델과 하나 이상의 뷰를 잇는 다리 역할을 하며 이벤트 등 
        메인 로직을 담당

  2) 장점
    - 애플리케이션의 구성 요소를 세 가지 역할로 구분하여 개발 프로세스에서
      각각의 구성 요소에만 집중해서 개발 가능
    - 재사용성과 확장성이 용이

  3) 단점
    - 애플리케이션이 복잡해질수록 모델과 뷰의 관계가 복잡해짐

  4) 스프링 mvc 패턴 과정
    - DispatcherServlet이라는 프론트 컨트롤러가 요청을 받음
    - Handler Mapping을 통해 요청 처리할 컨트롤러 찾음
    - 컨트롤러에서 비지니스 로직을 완료 후 모델에 담아 뷰 리졸버를 통해 뷰를 
      만듦
    - 뷰 전달
    
2. MVP 패턴
  1) 모델, 뷰, 프레젠터
    - 뷰와 프레젠터가 1대1관계여서 더 강한 결합을 지님

3. MVVM
  1) 모델, 뷰, 뷰모델
    - 뷰모델은 뷰를 추상화한 계층이며 VM : V = 1 : N 관계를 가짐
    - 뷰모델과 뷰는 일대다 관계를 가짐
    - Vue.js
